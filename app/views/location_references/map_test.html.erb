<div id="test_results">
  <h3>Ortsangaben (<span id="count">0</span>%)
    &nbsp;&mdash;&nbsp;Datensätze:&nbsp;<span id="num">0</span>
    &nbsp;&mdash;&nbsp;gültige:&nbsp;<span id="valid-num">0</span>
    &nbsp;&mdash;&nbsp;ungültige:&nbsp;<span id="invalid-num">0</span>
  </h3>
  <ul id="locations">
    <li class="heading">
      <span class="table t0">Nr.</span>
      <span class="table t1">Name</span>
      <span class="table t2">Geokoordinaten</span>
      <span class="table t3">Gültig?</span>
      <span class="table t4">Art</span>
      <span class="table t5">Interview</span>
      <span class="table t6">ReferenzArt</span>
      <span class="table t7">Region</span>
      <span class="table t8">Land</span>
    </li>
  </ul>
</div>

<script type="text/javascript"
    src="https://maps.google.com/maps/api/js?sensor=false">
</script>

<% javascript_tag do -%>

    var totalPages = 0;
    var currentPage = 0;
    var progressIndicator = $('count');
    var auth_token = '<%= form_authenticity_token.inspect-%>';
    var dateStamp = '<%= map_data_datestamp -%>';
    var dataSize = 0;
    var validSize = 0;
    var invalidSize = 0;
    var cycle = false;

    function startTest() {
        new Ajax.Request('/webservice/' + dateStamp + '/orte.json', {
            parameters: { 'authenticity_token': auth_token },
            method: 'GET',
            onSuccess: startProgressIndicator
        });
    }

    function updateProgressIndicator() {
        progressIndicator.innerHTML = '' + Math.floor(currentPage / totalPages * 100);
        $('num').innerHTML = dataSize;
        $('valid-num').innerHTML = validSize;
        $('invalid-num').innerHTML = invalidSize;
    }

    function startProgressIndicator(response) {
        totalPages = response.responseJSON.pages;
        updateProgressIndicator();
        getNextPage();
    }

    function getNextPage() {
        currentPage++;
        if(currentPage < (totalPages + 1)) {
            new Ajax.Request(('/webservice/' + dateStamp + '/orte/satz.' + currentPage + '.json'), {
                parameters: { 'authenticity_token': auth_token },
                method: 'GET',
                onSuccess: readData
            });
            updateProgressIndicator();
        }
    }

    function readData(response) {
        if(response.responseJSON.locations) {
          response.responseJSON.locations.each(function(location){
                var locationInfo = readLocationInfo(location);
                var referenceClass = locationReference(location.referenceType, location.locationType);
                var interviewURL = '/interviews/' + location.interviewId;
                var valid = true, latLng;
                if(isNaN(location.latitude) || isNaN(location.longitude)
                        || Number(location.latitude) == 0 || Number(location.longitude) == 0) {
                    valid = false;
                }
                if(valid) {
                  latLng = new google.maps.LatLng(location.latitude, location.longitude);
                } else {
                  latLng = 'latLng: ' + location.latitude + ';' +  location.longitude;
                }
                addLocationData(location.location, latLng, location.interviewId, locationInfo, location.region, location.country, referenceClass, interviewURL, valid);
          });
        }
        getNextPage();
    }

    function readLocationInfo(location) {
      var reference = translateLocStr(location.referenceType);
      var info = ''; // '<h3>' + location.locationType + ' ' + location.location + '</h3>';
      info = info + '<p class="interviewReference">' + reference + '&nbsp;' + location.interviewee + ' (' + location.interviewId + ')</p>';
      info = info + '<p class="referenceDetails">';
      info = info + location.interviewType.capitalize() + ', ' + location.language + (location.translated ? ' (übersetzt)' : '') + '</p>';
      return info;
    }

    function locationReference(refStr, type) {
        if(refStr == 'forced_labor_location') {
            if(['Camp','Lager'].indexOf(type) > -1) {
                return 'forced_labor_camp';
            } else if(['Company','Firma'].indexOf(type) > -1) {
                return 'forced_labor_company';
            }
        }
        return refStr;
    }

    function translateLocStr(str) {
        if(str.startsWith('forced_labor')) { return 'Zwangsarbeit -'; }
        if(str == 'deportation_location') { return 'Deportation -'; }
        if(str == 'place_of_birth') { return 'Geburtsort -'; }
        if(str == 'home_location') { return 'Lebensmittelpunkt -'; }
        if(str == 'return_location') { return 'Wohnort nach 1945 -'; }
        if(str == 'interview') { return 'Erwähnung bei'; }
        return str;
    }

    var shownData = 0;

    function addLocationData(location, latLng, interviewId, locationInfo, region, country, refClass, interviewURL, valid) {
        dataSize++;
        if(valid) {
          validSize++;
        } else {
          invalidSize++;
        }
        var fields = '';
        var regInfo = (region.name) ? 'defined' : '&mdash;';
        var cInfo = (country.name) ? 'defined' : '&mdash;';
        fields = fields + newField(dataSize, 0);
        fields = fields + newField(('*' + location + '!'), 1);
        fields = fields + newField(latLng, 2);
        fields = fields + newField(valid, 3);
        fields = fields + newField(locationInfo, 4);
        fields = fields + newField(interviewId, 5);
        fields = fields + newField(refClass, 6);
        fields = fields + newField(regInfo, 7);
        fields = fields + newField(cInfo, 8);
        var rowClass = cycle ? 'odd' : 'even';
        cycle = !cycle;
        if(!valid) {
            rowClass = 'invalid';
        }
        $('locations').insert({ bottom: new Element('li', { class: rowClass }).update(fields) });
    }

    function newField(value, index) {
        return "<span class='table t" + index + "'>" + value + "</span>";
    }

    $('baseContent').setStyle({width: '100%'});

    document.observe("dom:loaded", startTest);

<% end -%>
