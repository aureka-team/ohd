<div id="segment_annotation_<%= segment_annotation.id || 'new' -%>">
  <%= modal_window_close_button_on_javascript_request -%>
  <h2><%= UserAnnotation.human_name -%> <%= t('zu') -%>
    <%= segment_annotation.reference.interview.short_title -%>
    (<%= segment_annotation.reference.interview.archive_id -%>),
    <small>
      <%= Tape.human_name -%>&nbsp;<%= segment_annotation.reference.tape.number -%>,
      <%= (segment_annotation.reference.timecode || "::.").to_s.split('.').first.sub(/^\[\d+\]\s+/,'') -%>
    </small>
  </h2>
  <div>
    <%= error_message_on 'object', :description %>
    <% form_url = @object.new_record? ? create_annotation_user_contents_path(:method => :post) : update_annotation_user_content_path(@object) %>
    <% remote_form_for @object,
                       :url => form_url,
                       :before => "new Effect.Fade('modal_window'); $('ajax-spinner').show();",
                       :complete => "new Effect.Fade('shades');",
                       :html => { :id => "annotations_form" } do |f| %>
        <label name="user_annotation[description]">
          <%= t(:user_annotation, :scope => 'user_interface.user_content') -%>
        </label>
        <%= f.text_area :description, segment_annotation.private? ? {} : {:readonly => 'readonly', :class => 'readonly'} %>
        <div class="hint" style="width: 165px; margin-top: 0px; display: inline; clear: none;">
          <span>
            <span id="chars_allowed"><%= UserContent::ANNOTATION_LIMIT -%></span>&nbsp;
            <%= t(:chars_allowed, :scope => 'user_interface.user_content') -%>
          </span>
          <br/>
          <span style="margin-top: <%= segment_annotation.private? ? '125' : '10' -%>px; display: inline-block;">
            <%= t(:annotation_explanation, :scope => 'user_interface.user_content') -%>
            <% unless segment_annotation.private? -%>
            <br/><br/>
            <%= t(:published_annotation_change_notice, :scope => 'user_interface.messages') -%>
            <% end -%>
          </span>
        </div>
        <label id="workflow_state_label" name="workflow_state" class="checkbox">
          <%= check_box_tag 'raw_workflow_state', 'shared', !@object.private?, { :class => @object.private? ? 'private' : 'shared', :onclick => "$('user_annotation_workflow_state').value = $('raw_workflow_state').checked ? 'shared' : 'private'; $('raw_workflow_state').toggleClassName('shared');"} %>
          <%= t(:publish_annotation, :scope => 'user_interface.user_content', :annotation_guidelines => link_to(t(:annotation_guidelines, :scope => 'user_interface.user_content'), localized_home_path({:locale => current_locale, :page_id => "anmerkungsrichtlinien"}), :target => '_blank')) -%>
        </label>
        <%= hidden_field_tag 'user_annotation[workflow_state]', @object.private? ? 'private' : 'shared' -%>
        <%= hidden_field_tag 'user_annotation[media_id]', segment_annotation.media_id %>
        <%= hidden_field_tag 'user_annotation[translated]', false %>
        <span style="clear: both; float: left;">
            <%= f.submit t(:save, :scope => 'user_interface.actions'), :onclick => "$('user_annotation_translated').value = $('translated').hasClassName('active'); new Effect.Fade('modal_window'); $('ajax-spinner').show(); $('annotations_form').request(); return false;" %>
            <%= button_to_function t(:reset, :scope => 'user_interface.actions'), 'closeModalWindow(); return false;', :class => 'cancel' %>
        </span>
    <% end %>
  </div>
</div>

<% javascript_tag do %>
<%# Javascript for the dynamic character count %>
var maxLength = <%= UserContent::ANNOTATION_LIMIT %>;
var currentLabelColor = '';
var textEl = 'user_annotation_description';
var labelEl = 'chars_allowed';
function showCharLimit() {
    var len = maxLength - $(textEl).value.length;
    var label = $(labelEl);
    label.innerHTML = len;
    if((len < 0) && (currentLabelColor != 'red')) {
        $(labelEl).addClassName('red');
        currentLabelColor = 'red';
    } else {
        if((len >= 0) && (currentLabelColor == 'red')) {
            $(labelEl).removeClassName('red');
            currentLabelColor = '';
        }
    }
}
showCharLimit();
Event.observe(textEl, 'keyup', showCharLimit);
<% end %>