<div id="toggle_links">
    <%= link_to_function t(:maximize_all, :scope => 'user_interface.labels'), 'expandAllContents()', :id => "expand_all", :style => (@user_contents.size < 4 ? 'display: none;' : '') %>
    <%= link_to_function t(:minimize_all, :scope => 'user_interface.labels'), 'minimizeAllContents()', :id => "minimize_all", :style => (@user_contents.size < 4 ? '' : 'display: none;') %>
</div>
<div id="user_contents">
  <%= render :partial => 'user_content', :collection => @user_contents %>
  <% if @user_contents.empty? -%>
  <p><%= t(:no_saved_contents, :scope => 'user_interface.messages') -%></p>
  <% end -%>
</div>
<% javascript_tag do %>

    var togglingContent = 0;
    var contentItems = new Array();

    $$('#user_contents .item .header').each(function(elem){
        elem.addEventListener('click', toggleUserContent, false);
        contentItems[contentItems.length] = elem.parentNode.down('.details');
    });

    function toggleUserContent(event) {
        if(togglingContent > 0) { return; };
        var el = Element.up(Event.element(event), '.item');
        var details = el.down('.details');
        if(el.hasClassName('closed')) {
            // open
            expandContent(details,true);
        } else {
            // close
            minimizeContent(details,true);
        }
    }

    function expandAllContents() {
        if(togglingContent > 0) { return; };
        var closedContents = new Array();
        contentItems.each(function(el){
            if(el.parentNode.hasClassName('closed')) {
                closedContents[closedContents.length] = el;
            }
        });
        if(closedContents.length > 0) {
            Effect.multiple(closedContents, Effect.BlindDown, { duration: 0.5, beforeStart: function(){ closedContents.each(function(el){el.parentNode.removeClassName('closed');}); togglingContent = 1;}, afterFinish: function(){ togglingContent = 0; $('expand_all').hide(); $('minimize_all').show();}});
            new Effect.Fade('expand_all', { duration: 0.5 });
        } else {
            $('expand_all').hide();
            $('minimize_all').show();
        }
    }

    function minimizeAllContents() {
        if(togglingContent > 0) { return; };
        var openContents = new Array();
        contentItems.each(function(el){
            if(!el.parentNode.hasClassName('closed')) {
                openContents[openContents.length] = el;
            }
        });
        if(openContents.length > 0) {
            Effect.multiple(openContents, Effect.BlindUp, { duration: 0.5, beforeStart: function(){ togglingContent = 1;}, afterFinish: function(){ openContents.each(function(el){el.parentNode.addClassName('closed');}); togglingContent = 0; $('minimize_all').hide(); $('expand_all').show();}});
            new Effect.Fade('minimize_all', { duration: 0.5 });
        } else {
            $('minimize_all').hide();
            $('expand_all').show();
        }
    }

    function expandContent(el,reset) {
        if(reset) {
            new Effect.BlindDown(el, { duration: 0.5, beforeStart: function(){el.parentNode.removeClassName('closed'); togglingContent = 1;}, afterFinish: function(){ togglingContent = 0; }});
        } else {
            new Effect.BlindDown(el, { duration: 0.5, beforeStart: function(){el.parentNode.removeClassName('closed'); togglingContent = 0;}});
        }
    }

    function minimizeContent(el, reset) {
        if(reset) {
            new Effect.BlindUp(el, { duration: 0.5, beforeStart: function(){togglingContent = 1;}, afterFinish: function(){el.parentNode.addClassName('closed'); togglingContent = 0; }});
        } else {
            new Effect.BlindUp(el, { duration: 0.5, afterFinish: function(){el.parentNode.addClassName('closed'); togglingContent = 0;}});
        }
    }

<% end %>