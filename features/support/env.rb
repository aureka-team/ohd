# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'rubygems'
require 'spork'

Spork.prefork do
  ENV["RAILS_ENV"] ||= "cucumber"
  require File.expand_path(File.dirname(__FILE__) + '/../../config/environment')

  require 'cucumber/formatter/unicode' # Remove this line if you don't want Cucumber Unicode support
  require 'cucumber/rails/rspec'
  require 'cucumber/rails/world'
  require 'cucumber/rails/active_record'
  require 'cucumber/web/tableish'

  require 'capybara/rails'
  require 'capybara/cucumber'
  require 'capybara/session'

  require 'selenium-webdriver'

  # Configure the capybara test strategy.
  test_strategy = (ENV['TEST_STRATEGY'] || :chrome).to_sym
  case test_strategy
    when :firefox
      # Access Firefox through a remote Selenium server as the local integration
      # requires Ruby 1.9.
      Capybara.register_driver :firefox do |app|
        Capybara::Selenium::Driver.new(
            app, :browser => :remote, :desired_capabilities => Selenium::WebDriver::Remote::Capabilities.send('firefox')
        )
      end

    when :chrome
      # Configure capybara with local chromium.
      Capybara.register_driver :chrome do |app|
        Capybara::Selenium::Driver.new(app, :browser => :chrome)
      end

    else
      # For the :sauce test strategy everything will be handled in the
      # saucelab_integration.rb support file, see there.

      # Set the SauceLabs username and access key in your environment
      # if you want to execute remote tests (SAUCE_USERNAME/SAUCE_ACCESS_KEY).

      # Other test strategies (e.g. rack) do not require special handling.
  end
  Capybara.default_driver = test_strategy
  Capybara.javascript_driver = test_strategy


  # Capybara defaults to XPath selectors rather than Webrat's default of CSS3. In
  # order to ease the transition to Capybara we set the default here. If you'd
  # prefer to use XPath just remove this line and adjust any selectors in your
  # steps to use the XPath syntax.
  Capybara.default_selector = :css

  require 'database_cleaner'
  DatabaseCleaner::strategy = :truncation

  require 'factory_girl'

  require 'spec/expectations'

  require 'email_spec' # add this line if you use spork
  require 'email_spec/cucumber'
end

Spork.each_run do
  # If you set this to false, any error raised from within your app will bubble
  # up to your step definition and out to cucumber unless you catch it somewhere
  # on the way. You can make Rails rescue errors and render error pages on a
  # per-scenario basis by tagging a scenario or feature with the @allow-rescue tag.
  #
  # If you set this to true, Rails will rescue all errors and render error
  # pages, more or less in the same way your application would behave in the
  # default production environment. It's not recommended to do this for all
  # of your scenarios, as this makes it hard to discover errors in your application.
  ActionController::Base.allow_rescue = true

  # If you set this to true, each scenario will run in a database transaction.
  # You can still turn off transactions on a per-scenario basis, simply tagging
  # a feature or scenario with the @no-txn tag. If you are using Capybara,
  # tagging with @culerity or @javascript will also turn transactions off.
  #
  # If you set this to false, transactions will be off for all scenarios,
  # regardless of whether you use @no-txn or not.
  #
  # Beware that turning transactions off will leave data in your database
  # after each scenario, which can lead to hard-to-debug failures in
  # subsequent scenarios. If you do this, we recommend you create a Before
  # block that will explicitly put your database in a known state.
  Cucumber::Rails::World.use_transactional_fixtures = false

  # Reload factories.
  FactoryGirl.reload

  # Configure database cleaner.
  DatabaseCleaner::clean_with(:truncation)
end
