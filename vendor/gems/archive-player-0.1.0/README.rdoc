= archive-player

This is a configurable component for easily including a captions-enabled JW-Player
for multimedia playback in your views.

== Configuration

1. Installation:
Go to the gem's path:
cd vendor/gems/archive-player-0.1.0

And run the install task:
rake setup:install

This will copy the swf, image, js and configuration files to your app.

This will *not* copy the stylesheets file.

2. Configuration:
Open up the config/player.yml file and adjust the defaults according
to your needs. The configuration supports multiple player definitions and
will use the configuration options for 'default' normally.

The options are:
* flashplayer: path to jw_player swf file
* allowfullscreen (true/false): full screen mode available?
* width, height (numeric pixel values): dimensions of flash container
* autostart (true/false): start playback when finished with loading the page
* definition: use a player definition variant declared in the player.yml configuration file.
* item (number): playlist item that should start to play
* position (seconds): position that should start to play
* on_segment (js function): fired when segment is updated (while playing)
* on_ready (js function): fired when player has initialized
* on_playlist_item (js function): fired when playlist item is changed
* on_pause (js function): fired when player is paused
* on_play (js function): fired when play back is started

For a list of all event listeners see:
http://www.longtailvideo.com/support/jw-player/jw-player-for-flash-v5/12540/javascript-api-reference#Events

You can use all of them (rename onBufferChange in on_buffer_change etc.). 

Application-wide options may be overidden with each call of the player.

3. Add gem as dependency in environment.rb:

<tt>config.gem 'archive-player'</tt>

4. Include the javascript files:

<tt><%= javascript_include_tag 'jwplayer', 'archiveplayer-core', 'archiveplayer-effects' %></tt>

5. Instantiate the player in your views:

<tt><%= JWPlayer.new 'mediafile.mp4', { :width => 250, :height: 340 } %></tt>

You can also load a playlist.xml file instead of a media file.

6. Segments Plugins:

For a *single* media file, add the option :segments => { :file => 'mediafile_segment.xml' }.

In a *playlist* xml file:

<tt>
  ...
  <track>
    <location>track_01.mp4</location>
    <meta rel="segments">segments_for_track_01.xml</meta>
  </track>
  <track>
    <location>track_02.mp4</location>
    <meta rel="segments">segments_for_track_02.xml</meta>
  </track>
  ...
</tt>

7. Segments XML files:

<tt>
  <?xml version="1.0" encoding="utf-8"?>
  <segments>   
    <segment id="1" begin="10" end="70">
      <transcript>INT: When did you first experience the start of the war? ...</translation>
      <translation>INT: Wann hatten Sie Ihre erste Erfahrung mit dem Kriegsausbruch? ...</translation>
      <locations>Berlin, Prague</location>
    </segment>
    <segment id="2" begin="71" end="121">
      <transcript>AB: Well, the war started (-) the 22nd of June 1941. ...</translation>
      <translation>AB: Nun, der Krieg brach (-) am 22. Juni 1941 aus, ...</translation>
      <locations>Berlin, Prague</locations>
    </segment>
    ...
  </segments>
</tt>

begin and end are mandatory attributes for each segment, id is optional. Insert elements according to your needs (e.g. translation, keywords, locations).

8. Display segment's elements:

<%= player = JWPlayer.new 'playlistfile.xml' %>
<%= player.segments_container_for 'transcript' %>
<%= player.segments_container_for 'locations' %>

Content will update automatically while playing.

9. Adding event listeners:

<%= player = JWPlayer.new 'playlistfile.xml', {
        :on_ready => 'function() { doSomething(); doSomethingElse(); }',
        :on_segment => 'function(event) { highlightSomething(event.id); }'
}%>

For example, the segment listener (:on_segment) callback has following attributes:

<tt>
  function(event) {
    event.id; // segment's id
    event.begin;
    event.end;
    event.previousBegin; // begin of the previous segment in seconds
    event.nextBegin;
    event.segmentData; // an object of your custom attributes! (e.g. event.segmentData.translation)
  }
</tt>

== Building the JW Player

1. See http://developer.longtailvideo.com/trac/browser/trunk/fl5/README.txt

2. Move the play button

fl5/src/com/longtailvideo/jwplayer/view/components/DisplayComponent.as:246

<tt>
  private function positionIcon():void {
	  icon.x = background.scaleX / 2;
		icon.y = background.scaleY * .66;
  }
</tt>

3. Remove the watermark (only for licenced players!)

fl5/src/com/longtailvideo/jwplayer/view/Logo.as:26

<tt>
  /** Configuration defaults **/
  protected var defaults:Object = {
    prefix: "",
    file: "",
    link: "",
    linktarget: "_blank",
    margin: 8,
    out: 0,
    over: 1,
    timeout: 3,
    hide: "true",
    position: "bottom-left"
  }
</tt>

4. Add secure token

fl5/src/com/longtailvideo/jwplayer/media/RTMPMediaProvider.as:559

<tt>
  _connection.call("secureTokenResponse", null, TEA.decrypt(evt.info.secureToken,"### token here ###"));
</tt>

== Copyright

Copyright (c) 2010 jozs. See LICENSE for details.
